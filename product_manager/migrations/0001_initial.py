# Generated by Django 5.1.5 on 2025-01-25 19:10

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="FinancialInstrument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique de l'instrument",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Nom de l'instrument", max_length=100),
                ),
                (
                    "type",
                    models.CharField(
                        help_text="Type d'instrument (Action, Obligation, Option, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        help_text="Devise de cotation de l'instrument", max_length=3
                    ),
                ),
                (
                    "current_price",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Prix actuel de l'instrument",
                        max_digits=15,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Index",
            fields=[
                (
                    "code",
                    models.CharField(
                        help_text="Code unique de l'indice (ex: ASX200)",
                        max_length=10,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ric",
                    models.CharField(
                        help_text="Code RIC Reuters de l'indice (ex: .AXJO)",
                        max_length=10,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nom complet de l'indice", max_length=100
                    ),
                ),
                (
                    "country",
                    models.CharField(help_text="Pays de l'indice", max_length=50),
                ),
                (
                    "currency",
                    models.CharField(
                        help_text="Devise de cotation de l'indice", max_length=3
                    ),
                ),
                (
                    "excluded_from_dividends",
                    models.BooleanField(
                        default=False,
                        help_text="True si l'indice est exclu du calcul des dividendes après avoir eu la meilleure performance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Portfolio",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique du portefeuille",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "current_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Valeur actuelle du portefeuille",
                        max_digits=15,
                    ),
                ),
                (
                    "target_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Valeur cible du portefeuille",
                        max_digits=15,
                    ),
                ),
                (
                    "last_rebalance",
                    models.DateTimeField(
                        help_text="Date du dernier rebalancement du portefeuille"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StructuredProduct",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique du produit",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reference_nav",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Valeur liquidative de référence utilisée pour les calculs",
                        max_digits=15,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=datetime.date(2009, 1, 5),
                        help_text="Date de lancement du produit (T0)",
                    ),
                ),
                (
                    "courant_date",
                    models.DateField(
                        default=datetime.date(2009, 1, 5),
                        help_text="Date courante pour le produit",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        default=datetime.date(2014, 1, 6),
                        help_text="Date d'échéance du produit (Tc)",
                    ),
                ),
                (
                    "min_return_cap",
                    models.DecimalField(
                        decimal_places=2,
                        default=-0.15,
                        help_text="Limite de perte maximale (-15%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(0.0),
                        ],
                    ),
                ),
                (
                    "max_return_cap",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.5,
                        help_text="Plafond de gain maximal (50%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "guaranteed_return",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.2,
                        help_text="Performance minimale garantie si seuil de 20% atteint",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IndexBasket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique du panier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "basket_performance",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Performance globale du panier (moyenne des performances)",
                        max_digits=10,
                    ),
                ),
                (
                    "annual_performance",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        help_text="Performance annuelle du panier entre Ti-1 et Ti",
                        max_digits=10,
                    ),
                ),
                (
                    "daily_performance",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        help_text="Performance annuelle journalière  du panier ",
                        max_digits=10,
                    ),
                ),
                (
                    "six_month_performance",
                    models.DecimalField(
                        decimal_places=4,
                        default=0,
                        help_text="Performance sur six mois   du panier ",
                        max_digits=10,
                    ),
                ),
                (
                    "active_indices",
                    models.ManyToManyField(
                        help_text="Liste des indices actifs dans le panier",
                        to="product_manager.index",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Produit structuré associé à ce panier",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_manager.structuredproduct",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PerformanceCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique de la constatation",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("check_date", models.DateField(help_text="Date de constatation Ti")),
                (
                    "basket_performance",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Performance du panier à la date Ti",
                        max_digits=10,
                    ),
                ),
                (
                    "max_annual_return",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Meilleure performance annuelle parmi les indices",
                        max_digits=10,
                    ),
                ),
                (
                    "threshold_reached",
                    models.BooleanField(
                        default=False,
                        help_text="True si la performance >= 20%, déclenchant la garantie",
                    ),
                ),
                (
                    "basket",
                    models.ForeignKey(
                        help_text="Panier d'indices évalué",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_manager.indexbasket",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DividendPayment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique du paiement",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(help_text="Date de paiement du dividende"),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Montant du dividende (50 × max performance)",
                        max_digits=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("PAID", "Payé"),
                            ("CANCELLED", "Annulé"),
                        ],
                        default="PENDING",
                        help_text="Statut du paiement du dividende",
                        max_length=20,
                    ),
                ),
                (
                    "excluded_index",
                    models.ForeignKey(
                        help_text="Indice exclu après ce paiement (meilleure performance)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="product_manager.index",
                    ),
                ),
                (
                    "performance_check",
                    models.ForeignKey(
                        help_text="Constatation ayant déclenché le dividende",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_manager.performancecheck",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Holding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique de la position",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("quantity", models.IntegerField(help_text="Nombre de titres détenus")),
                (
                    "purchase_price",
                    models.DecimalField(
                        decimal_places=4, help_text="Prix moyen d'achat", max_digits=15
                    ),
                ),
                (
                    "current_price",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Prix actuel de l'instrument",
                        max_digits=15,
                    ),
                ),
                (
                    "total_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Valeur totale de la position (quantité × prix)",
                        max_digits=15,
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        help_text="Instrument financier détenu",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_manager.financialinstrument",
                    ),
                ),
                (
                    "portfolio",
                    models.ForeignKey(
                        help_text="Portefeuille contenant cette position",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_manager.portfolio",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="portfolio",
            name="structured_product",
            field=models.OneToOneField(
                help_text="Produit structuré couvert par ce portefeuille",
                on_delete=django.db.models.deletion.CASCADE,
                to="product_manager.structuredproduct",
            ),
        ),
        migrations.CreateModel(
            name="MarketData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="Identifiant unique de la donnée de marché",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(help_text="Date et heure de la donnée"),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Valeur de la donnée (prix ou rendement)",
                        max_digits=15,
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        help_text="Type de donnée (ClosePrice, CloseRet, etc.)",
                        max_length=20,
                    ),
                ),
                (
                    "index",
                    models.ForeignKey(
                        help_text="Indice auquel se rapporte la donnée",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product_manager.index",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["timestamp", "data_type"],
                        name="product_man_timesta_fafd93_idx",
                    )
                ],
            },
        ),
    ]
